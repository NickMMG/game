// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().

const Hero = require('./game-models/Hero');
const Enemy = require('./game-models/Enemy');
// const Boomerang = require('./game-models/Boomerang');
const View = require('./View');
const Score = require('./Score');
const runInteractiveConsole = require('./keyboard');
const readBD = require('./game-models/readDB');
// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.

class Game {
  constructor({ trackLength, name }) {
    this.trackLength = trackLength;
    this.hero = new Hero(); // –ì–µ—Ä–æ—é –º–æ–∂–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –±—É–º–µ—Ä–∞–Ω–≥.
    this.enemy = new Enemy();
    this.view = new View();
    this.score = new Score(name);
    this.track = [];
    // this.track2 = [];
    this.regenerateTrack(this.hero.vertical);
  }

  regenerateTrack(y) {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    this.track = [
      new Array(this.trackLength).fill(' '),
      new Array(this.trackLength).fill(' '),
      new Array(this.trackLength).fill(' '),
    ];
    this.track[y].splice(this.hero.position, 3, this.hero.skin);
    this.track[y][this.hero.position] = this.hero.skin;
    this.track[y][this.hero.boom.position] = this.hero.boom.skin;
    this.track[this.enemy.vertical][this.enemy.position] = this.enemy.skin;
    // –º–µ–Ω—è–µ–º —Å–∫–∏–Ω –≤—Ä–∞–≥–∞ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞
    const verticalCheck = this.enemy.vertical === this.hero.vertical;
    if (
      this.hero.boom.position >= this.enemy.position
      && verticalCheck
      && this.enemy.position > this.hero.position
    ) {
      this.track[this.enemy.vertical].splice(this.enemy.position, 3, 'üí•üí•üí•');
    }
  }

  check() {
    const verticalCheck = this.enemy.vertical === this.hero.vertical;
    if (this.hero.boom.position >= this.enemy.position && verticalCheck) {
      this.score.plusScore();
      setTimeout(() => {
        this.enemy.die();
        this.enemy = new Enemy();
      }, 20);
    }
    if (this.enemy.position <= 0 && this.enemy.position >= -5) {
      this.enemy = new Enemy();
    }
    if (this.hero.position >= this.hero.boom.position) {
      this.hero.boom.position = -1;
    }
    if (this.hero.position === this.enemy.position && verticalCheck) {
      // await readBD(this.score.name, this.score.scoreNumber);
      this.hero.die(this.score.scoreNumber, this.score.name);
    }
  }

  play() {
    runInteractiveConsole(this.hero);
    setInterval(() => {
      this.enemy.moveLeft();
    }, 80);
    setInterval(() => {
      // Let's play!
      this.check();
      this.regenerateTrack(this.hero.vertical);
      this.view.render(this.track, this.score.scoreNumber, this.score.name);
    }, 30);
    // —Ç—É—Ç –≤ –±–∞–∑—É –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –æ—á–∫–∏, —Ç–æ–ª—å–∫–æ 0
    // await readBD(this.score.name, this.score.scoreNumber)
  }
}

module.exports = Game;
